* My Dotfiles

** Development

I use Emacs and its literate programming features.

The content of both the =Makefile= and the =files= directory
is generated out of this org file, so do not edit these directly
but work on this document instead!

Then:

1. Run =C-c C-v t=
2. Commit all the changes
3. Run =make=

** Install

1. Clone this repository (or pull the latest changes)
2. Run =make=

These are the files that will be copied over your home directory

#+begin_src makefile :tangle Makefile :mkdirp yes
install: $(HOME)/.gitconfig \
         $(HOME)/.gitconfig-local \
         $(HOME)/.gitignore \
         $(HOME)/.emacs.d/init.el
#+end_src

** My Setup

*** Git

My global Git configuration file will be installed in my home directory:

#+begin_src makefile :tangle Makefile :mkdirp yes
$(HOME)/.gitconfig: files/.gitconfig
	cp -f $^ $@
#+end_src

It will make provision for local additions that
can't be checked in for whatever reason (e.g. work stuff).

#+begin_src text :tangle files/.gitconfig :mkdirp yes
  [include]
          path = ~/.gitconfig-local
#+end_src

That file also lives in my home directory:

#+begin_src makefile :tangle Makefile
$(HOME)/.gitconfig-local:; touch $(HOME)/.gitconfig-local
#+end_src

These are the things I always want Git to ignore:

#+begin_src text :tangle files/.gitignore :mkdirp yes
,*~
.DS_Store
.\#*
.clj-kondo
.cljs_node_repl
.cpcache
.hgignore
.lsp
.nrepl-port
\#*\#
dist
node_modules
out
resources
target
#+end_src

These patterns live in a file in my home directory:

#+begin_src makefile :tangle Makefile
$(HOME)/.gitignore: files/.gitignore
	cp -f $^ $@
#+end_src

And that file is referenced in my global Git configuration file:

#+begin_src text :tangle files/.gitconfig :mkdirp yes
  [core]
          excludesFile = ~/.gitignore
#+end_src

*** Emacs

Open Emacs maximised:

#+begin_src emacs-lisp :tangle files/init.el
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

/Remember that what we usually refer to as a window is called a frame in Emacs parlance./

I don't find both Emacs toolbar & scrollbar very useful so I disable them:

#+begin_src emacs-lisp :tangle files/init.el
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Disable default left and right margins:

#+begin_src emacs-lisp :tangle files/init.el
  (set-fringe-mode 0)
#+end_src

I always want to see line numbers so I enable that feature globally:

#+begin_src emacs-lisp :tangle files/init.el
  (global-display-line-numbers-mode t)
#+end_src

I need this as other I cannot type that character :)

#+begin_src emacs-lisp :tangle files/init.el
  (global-set-key (kbd "M-3") (lambda ()
                                (interactive)
                                (insert "#")))
#+end_src

This seems to be frowned upon but I find using =Shift= and the arrow keys
really handy to navigate the windows:

#+begin_src emacs-lisp :tangle files/init.el
  (windmove-default-keybindings)
#+end_src

This allows a "circular" navigation e.g. if you reach the last window
then =Shift-<Arrow Left>= get you back to the first window.

#+begin_src emacs-lisp :tangle files/init.el
  (setq windmove-wrap-around t)
#+end_src

Indentation

#+begin_src emacs-lisp :tangle files/init.el
  (electric-indent-mode -1)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq-default js-indent-level 2)
#+end_src

I need this to avoid choking lsp-mode:
https://emacs-lsp.github.io/lsp-mode/page/performance/

#+begin_src emacs-lisp :tangle files/init.el
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq gc-cons-threshold 100000000)
#+end_src

**** Packages

I use [[https://github.com/radian-software/straight.el][straight.el]] as my package manager.

This is what is needed to bootstrap it:

#+begin_src emacs-lisp :tangle files/init.el
  (defvar bootstrap-version)

  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; tell `use-package` to use `straight.el` as the package manager
  (setq straight-use-package-by-default t)

  (straight-use-package 'use-package)
#+end_src

**** Fira Code

First, make sure [[https://github.com/tonsky/FiraCode][Fira Code]] is installed!

#+begin_src emacs-lisp :tangle files/init.el
(set-frame-font "Fira Code:size=14")

(use-package ligature
  :init
  ;; Enable the www ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))

  ;; Enable ligatures in programming modes                                                           
  (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                       ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                       "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                       "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                       "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                       "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                       "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                       "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                       "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                       "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
  
  (global-ligature-mode 't)
)
#+end_src

***** Completion

#+begin_src emacs-lisp :tangle files/init.el

(use-package vertico
  :ensure t
  :init
  (vertico-mode t)
  :custom
  (vertico-cycle t) ; goes back to the top when reaching the end of minibuffer
  )

#+end_src

#+begin_src emacs-lisp :tangle files/init.el

(use-package marginalia
  :ensure t
  :init
  (marginalia-mode t))

#+end_src

Provide fuzzy search:

#+begin_src emacs-lisp :tangle files/init.el

(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic)))

#+end_src

qq

#+begin_src emacs-lisp :tangle files/init.el

(use-package consult
  :bind (("C-x b" . consult-buffer)
         ("C-s" . consult-line)))

#+end_src

#+begin_src emacs-lisp :tangle files/init.el

(use-package which-key
  :init
  (which-key-mode t))

#+end_src


***** Theme

Install and use [[https://github.com/protesilaos/ef-themes][ef-themes]] from Prot.

#+begin_src emacs-lisp :tangle files/init.el
  (use-package ef-themes
    :init (ef-themes-select 'ef-maris-dark))
#+end_src

Not sure exactly what those are but that came with Emacs 29 apparentlty
and I need those as otherwise I get annoying *Warning* buffer all the time.

See https://www.masteringemacs.org/article/how-to-get-started-tree-sitter

#+begin_src emacs-lisp :tangle files/init.el
  (setq treesit-language-source-alist
     '((bash "https://github.com/tree-sitter/tree-sitter-bash")
       (css "https://github.com/tree-sitter/tree-sitter-css")
       (elisp "https://github.com/Wilfred/tree-sitter-elisp")
       (html "https://github.com/tree-sitter/tree-sitter-html")
       (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
       (json "https://github.com/tree-sitter/tree-sitter-json")
       (make "https://github.com/alemuller/tree-sitter-make")
       (markdown "https://github.com/ikatyang/tree-sitter-markdown")
       (python "https://github.com/tree-sitter/tree-sitter-python")
       (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
       (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
       (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
#+end_src

#+begin_src emacs-lisp :tangle files/init.el
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))
#+end_src

#+begin_src emacs-lisp :tangle files/init.el
(use-package corfu
  :init
  (global-corfu-mode)
  :config
  (setq corfu-auto t))
#+end_src

Make sure Emacs can see the environment variables I have in my usual shell:

#+begin_src emacs-lisp :tangle files/init.el
  (use-package exec-path-from-shell
    :init
      (when (memq window-system '(mac ns x))
        (exec-path-from-shell-initialize)))
#+end_src

Prevents org-mode from adding extra indentation:

#+begin_src emacs-lisp :tangle files/init.el
(setq org-src-preserve-indentation t)
#+end_src

Let's start with some basic project management stuff:

#+begin_src emacs-lisp :tangle files/init.el
  (use-package magit
    :init
    (with-eval-after-load 'project
      (keymap-set project-prefix-map "m" #'magit-project-status)
      (keymap-set project-prefix-map "g" #'consult-ripgrep)
      (setq project-switch-commands '((magit-project-status "Magit")
                                      (project-find-file "Find file")
                                      (consult-ripgrep "Find rg")
                                      (project-find-dir "Find dir")
                                      (project-shell "Shell")))))
#+end_src

***** Embark

#+begin_src emacs-lisp :tangle files/init.el

(use-package embark
  :straight t
  :bind
  (("C-." . embark-act)
   ("C-h B" . embark-bindings))
  :init
  (setq prefix-help-command #'embark-prefix-help-command))

(use-package embark-consult)

(use-package wgrep)

#+end_src

Web development.

The major mode `tsx-ts-mode` comes with Emacs 29.1 and is what I will use
for both JavaScript and TypeScript source files. React is also supported.

New entries are added at the beginning of the list and so will take
precedence over any default entries from Emacs.

#+begin_src emacs-lisp :tangle files/init.el
(add-to-list 'auto-mode-alist '("\\.[jt]s[x]?\\'" . tsx-ts-mode))
#+end_src

Activate lsp

#+begin_src emacs-lisp :tangle files/init.el
(add-hook 'tsx-ts-mode-hook 'lsp-deferred)
#+end_src

This might be occasionally useful:

#+begin_src emacs-lisp :tangle files/init.el
  (use-package add-node-modules-path
    :hook ((tsx-ts-mode . #'add-node-modules-path)))
#+end_src

Some projects insist on using Prettier and even go
out of their way to integrate it with Git hooks.

I need to support those projects as otherwise I will
have a really tough time.

#+begin_src emacs-lisp :tangle files/init.el
  (use-package prettier-js
    :hook ((tsx-ts-mode . prettier-js-mode)))
#+end_src

Things I need when I do Clojure(Script) development:

#+begin_src emacs-lisp :tangle files/init.el
  (use-package cider)

  (use-package clojure-mode
    :mode (("\\.cljc?\\'" . clojure-mode)
           ("\\.cljs\\'" . clojurescript-mode)))

  (use-package rainbow-delimiters
    :hook ((clojure-mode . rainbow-delimiters-mode)
           (clojurescript-mode . rainbow-delimiters-mode)
           (emacs-lisp-mode . rainbow-delimiters-mode)))

  (use-package paredit
    :hook ((clojure-mode . paredit-mode)
           (clojurescript-mode . paredit-mode)
           (emacs-lisp-mode . paredit-mode)))
#+end_src

Support for the [[https://janet-lang.org/][Janet]] programming language:

You need to install Janet first:

#+begin_src
  brew install janet
#+end_src

#+begin_src emacs-lisp :tangle files/init.el
  (use-package janet-mode
    :mode (("\\.janet\\'" . janet-mode))
    :hook ((janet-mode . paredit-mode)
           (janet-mode . rainbow-delimiters-mode)))
#+end_src

Check this [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][paredit]] guide out!

The [[https://github.com/pashky/restclient.el][restclient]] package is a nice alternative to Postman

#+begin_src emacs-lisp :tangle files/init.el
  (use-package restclient)
#+end_src

My Emacs configuration file will be put in a standard location:

#+begin_src makefile :tangle Makefile
$(HOME)/.emacs.d/init.el: files/init.el
	mkdir -p $(@D)
	cp $^ $@
#+end_src

**** Misc

See https://emacsredux.com/blog/2024/03/11/tracking-world-time-with-emacs/

#+begin_src emacs-lisp :tangle files/init.el
(setq world-clock-list
      '(("Europe/London" "London")
        ("Europe/Brussels" "Brussels")
        ("Europe/Kiev" "Kiev")
        ("Asia/Seoul" "Seoul")))
#+end_src
