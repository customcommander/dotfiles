* My Dotfiles

** Development

I use Emacs and its literate programming features.

The content of both the =Makefile= and the =files= directory
is generated out of this org file, so do not edit these directly
but work on this document instead!

Then:

1. Run =C-c C-v t=
2. Commit all the changes
3. Run =make=

** Install

1. Clone this repository (or pull the latest changes)
2. Run =make=

These are the files that will be copied over your home directory

#+begin_src makefile :tangle files/Makefile :mkdirp yes
  install: $(HOME)/.gitconfig \
           $(HOME)/.gitconfig-local \
           $(HOME)/.gitignore \
           $(HOME)/.emacs.d/init.el
#+end_src

** My Setup

*** Git

My global Git configuration file will be installed in my home directory:

#+begin_src makefile :tangle files/Makefile :mkdirp yes
  $(HOME)/.gitconfig: files/.gitconfig
          cp -f $^ $@
#+end_src

It will make provision for local additions that
can't be checked in for whatever reason (e.g. work stuff).

#+begin_src text :tangle files/.gitconfig :mkdirp yes
  [include]
          path = ~/.gitconfig-local
#+end_src

That file also lives in my home directory:

#+begin_src makefile :tangle files/Makefile
  $(HOME)/.gitconfig-local:; touch $(HOME)/.gitconfig-local
#+end_src

These are the things I always want Git to ignore:

#+begin_src text :tangle files/.gitignore :mkdirp yes
dist
node_modules
.cljs_node_repl
.cpcache
.lsp
.clj-kondo
out
target
resources
.nrepl-port
.hgignore
,*~
\#*\#
.\#*
#+end_src

These patterns live in a file in my home directory:

#+begin_src makefile :tangle files/Makefile
  $(HOME)/.gitignore: files/.gitignore
          cp -f $^ $@
#+end_src

And that file is referenced in my global Git configuration file:

#+begin_src text :tangle files/.gitconfig :mkdirp yes
  [core]
          excludesFile = ~/.gitignore
#+end_src


*** Emacs

Open Emacs maximised:

#+begin_src emacs-lisp :tangle files/init.el
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

/Remember that what we usually refer to as a window is called a frame in Emacs parlance./

I don't find both Emacs toolbar & scrollbar very useful so I disable them:

#+begin_src emacs-lisp :tangle files/init.el
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Disable default left and right margins:

#+begin_src emacs-lisp :tangle files/init.el
  (set-fringe-mode 0)
#+end_src

I always want to see line numbers so I enable that feature globally:

#+begin_src emacs-lisp :tangle files/init.el
  (global-display-line-numbers-mode t)
#+end_src

I need this as other I cannot type that character :)

#+begin_src emacs-lisp :tangle files/init.el
  (global-set-key (kbd "M-3") (lambda ()
                                (interactive)
                                (insert "#")))
#+end_src

This seems to be frowned upon but I find using =Shift= and the arrow keys
really handy to navigate the windows:

#+begin_src emacs-lisp :tangle files/init.el
  (windmove-default-keybindings)
#+end_src

This allows a "circular" navigation e.g. if you reach the last window
then =Shift-<Arrow Left>= get you back to the first window.

#+begin_src emacs-lisp :tangle files/init.el
  (setq windmove-wrap-around t)
#+end_src

My Emacs configuration file will be put in a standard location:

#+begin_src makefile :tangle files/Makefile
  $(HOME)/.emacs.d/init.el: files/init.el
          mkdir -p $(@D)
          cp $^ $@
#+end_src

